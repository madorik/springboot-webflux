/*
 * This file is generated by jOOQ.
 */
package jooq.demo_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.demo_dsl.JMydb;
import jooq.demo_dsl.Keys;
import jooq.demo_dsl.tables.records.JFilesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFiles extends TableImpl<JFilesRecord> {

    private static final long serialVersionUID = -1728484204;

    /**
     * The reference instance of <code>mydb.files</code>
     */
    public static final JFiles FILES = new JFiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilesRecord> getRecordType() {
        return JFilesRecord.class;
    }

    /**
     * The column <code>mydb.files.id</code>.
     */
    public final TableField<JFilesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydb.files.created_date</code>.
     */
    public final TableField<JFilesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mydb.files.modified_date</code>.
     */
    public final TableField<JFilesRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mydb.files.board_id</code>.
     */
    public final TableField<JFilesRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mydb.files.comment_id</code>.
     */
    public final TableField<JFilesRecord, Long> COMMENT_ID = createField(DSL.name("comment_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mydb.files.content_type</code>.
     */
    public final TableField<JFilesRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.files.file_name</code>.
     */
    public final TableField<JFilesRecord, String> FILE_NAME = createField(DSL.name("file_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.files.file_path</code>.
     */
    public final TableField<JFilesRecord, String> FILE_PATH = createField(DSL.name("file_path"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.files.save_file_name</code>.
     */
    public final TableField<JFilesRecord, String> SAVE_FILE_NAME = createField(DSL.name("save_file_name"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.files.size</code>.
     */
    public final TableField<JFilesRecord, Long> SIZE = createField(DSL.name("size"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>mydb.files</code> table reference
     */
    public JFiles() {
        this(DSL.name("files"), null);
    }

    /**
     * Create an aliased <code>mydb.files</code> table reference
     */
    public JFiles(String alias) {
        this(DSL.name(alias), FILES);
    }

    /**
     * Create an aliased <code>mydb.files</code> table reference
     */
    public JFiles(Name alias) {
        this(alias, FILES);
    }

    private JFiles(Name alias, Table<JFilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFiles(Name alias, Table<JFilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JFiles(Table<O> child, ForeignKey<O, JFilesRecord> key) {
        super(child, key, FILES);
    }

    @Override
    public Schema getSchema() {
        return JMydb.MYDB;
    }

    @Override
    public Identity<JFilesRecord, Long> getIdentity() {
        return Keys.IDENTITY_FILES;
    }

    @Override
    public UniqueKey<JFilesRecord> getPrimaryKey() {
        return Keys.KEY_FILES_PRIMARY;
    }

    @Override
    public List<UniqueKey<JFilesRecord>> getKeys() {
        return Arrays.<UniqueKey<JFilesRecord>>asList(Keys.KEY_FILES_PRIMARY);
    }

    @Override
    public JFiles as(String alias) {
        return new JFiles(DSL.name(alias), this);
    }

    @Override
    public JFiles as(Name alias) {
        return new JFiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFiles rename(String name) {
        return new JFiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFiles rename(Name name) {
        return new JFiles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, LocalDateTime, LocalDateTime, Long, Long, String, String, String, String, Long> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
