/*
 * This file is generated by jOOQ.
 */
package jooq.demo_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.demo_dsl.JMydb;
import jooq.demo_dsl.Keys;
import jooq.demo_dsl.tables.records.JBoardRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBoard extends TableImpl<JBoardRecord> {

    private static final long serialVersionUID = -1106718628;

    /**
     * The reference instance of <code>mydb.board</code>
     */
    public static final JBoard BOARD = new JBoard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBoardRecord> getRecordType() {
        return JBoardRecord.class;
    }

    /**
     * The column <code>mydb.board.board_id</code>.
     */
    public final TableField<JBoardRecord, Long> BOARD_ID = createField(DSL.name("board_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydb.board.created_date</code>.
     */
    public final TableField<JBoardRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mydb.board.modified_date</code>.
     */
    public final TableField<JBoardRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mydb.board.contents</code>.
     */
    public final TableField<JBoardRecord, String> CONTENTS = createField(DSL.name("contents"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mydb.board.delete_yn</code>.
     */
    public final TableField<JBoardRecord, String> DELETE_YN = createField(DSL.name("delete_yn"), org.jooq.impl.SQLDataType.VARCHAR(1).defaultValue(org.jooq.impl.DSL.field("'N'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mydb.board.depth</code>.
     */
    public final TableField<JBoardRecord, Integer> DEPTH = createField(DSL.name("depth"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>mydb.board.subject</code>.
     */
    public final TableField<JBoardRecord, String> SUBJECT = createField(DSL.name("subject"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>mydb.board.thread</code>.
     */
    public final TableField<JBoardRecord, Long> THREAD = createField(DSL.name("thread"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>mydb.board.user_id</code>.
     */
    public final TableField<JBoardRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>mydb.board</code> table reference
     */
    public JBoard() {
        this(DSL.name("board"), null);
    }

    /**
     * Create an aliased <code>mydb.board</code> table reference
     */
    public JBoard(String alias) {
        this(DSL.name(alias), BOARD);
    }

    /**
     * Create an aliased <code>mydb.board</code> table reference
     */
    public JBoard(Name alias) {
        this(alias, BOARD);
    }

    private JBoard(Name alias, Table<JBoardRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBoard(Name alias, Table<JBoardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JBoard(Table<O> child, ForeignKey<O, JBoardRecord> key) {
        super(child, key, BOARD);
    }

    @Override
    public Schema getSchema() {
        return JMydb.MYDB;
    }

    @Override
    public Identity<JBoardRecord, Long> getIdentity() {
        return Keys.IDENTITY_BOARD;
    }

    @Override
    public UniqueKey<JBoardRecord> getPrimaryKey() {
        return Keys.KEY_BOARD_PRIMARY;
    }

    @Override
    public List<UniqueKey<JBoardRecord>> getKeys() {
        return Arrays.<UniqueKey<JBoardRecord>>asList(Keys.KEY_BOARD_PRIMARY);
    }

    @Override
    public List<ForeignKey<JBoardRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JBoardRecord, ?>>asList(Keys.FKFYF1FCHNBY6HNDHLFAIDIER1R);
    }

    public JUser user() {
        return new JUser(this, Keys.FKFYF1FCHNBY6HNDHLFAIDIER1R);
    }

    @Override
    public JBoard as(String alias) {
        return new JBoard(DSL.name(alias), this);
    }

    @Override
    public JBoard as(Name alias) {
        return new JBoard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBoard rename(String name) {
        return new JBoard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBoard rename(Name name) {
        return new JBoard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, String, String, Integer, String, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
